# symmetry.raphael.js #

bringing symmetry to Raphael.

_[ NB: very work-in-progress ]_

_requires Raphael and underscore.js_

See [my related blog post][sympost].

[sympost]:http://mjhoy.name/articles/symmetry

## Symmetry Groups ##

Peter S. Stevens, in _Handbook of Regular Patterns_, defines a "symmetry
group" thus:

> A symmetry group is a collection of symmetry operations that together
> share three characteristics: (1) each operation can be followed by
> a second operation to produce a third operation that itself is a
> member of the group, (2) each operation can be undone by another
> operation, that is to say, for each operation there exists an inverse
> operation, and (3) the position of the pattern after an operation
> can be the same as before the operation, that is, there exists an
> identity operation which leaves the figure unchanged.

Whether what I'm calling "symmetry groups" here is at all accurate, I'm 
not sure. Anyway, it was the above book which prompted me to write this,
and try to allow for a programmatical way to perform symmetry operations in
Raphael.

### Install ###

symmetry.raphael.js currently depends on both the Raphael and Underscore
JavaScript libraries. Run the `rake js:install` task included in this
repository to download these to `lib/` (requires wget).

### Test ###

The tests require Google's [JsTestDriver][jstd]. To run, download the JsTestDriver
jar file (JsTestDriver-1.2.2.jar) to e.g. `~bin/`. Run the server like so:
`java -jar ~/bin/JsTestDriver-1.2.2.jar --port 4224`. Point a browser to the
port used (4224) and "capture" it. Now, from the symmetry project root, 
`java -jar ~/bin/JsTestDriver-1.2.2.jar --tests all` will run the test
suite.

[jstd]:http://code.google.com/p/js-test-driver/

### Usage ###

symmetry.raphael.js adds a new method `iterate` to Raphael elements, which
takes an (optional) integer -- how many times the iteration is performed --
and a transformation function, which serves as the iteration procedure to
repeate.

E.g.:

**create a new rect** (10 pixels square at point 50, 50)

    var r = paper.rect(50, 50, 10, 10)

**create an iteration** from the rect

    var r1 = r.iterate(5, function() {
      this.translate(10,10,);
    });

This creates a series of squares in a diagonal line (each one
moving 10 on the x-axis and 10 on the y-axis from the previous
square.)

The transformation function is called in the context of the most
recently iterated [copied] element, so `this` is evaluated as the
Raphael object to transform.

**create a nested iteration** from the diagonal series of squares:

    var r2 = r1.iterate(5, function() {
      this.translate(20, 0);
    });
   
Note that `r1` is the iteration group returned from the previous iterate
call; it also has the iterate method, though it is not a real Raphael
element. (It mimics many of its methods, though.) 

## Raphael extensions ##

### rotateAround(degree, cx, cy) ###

This method is provided on all Raphael and iteration objects,
mostly to allow for additive rotations with a 'pivot' point defined.
For a Raphael object this is not much different than rotate(degree, x, y)
except that the rotation is additive and `cx` and `cy` are _relative_
to the Raphael object.

Its real use is for iteration. An iterated group created as such:

    var s = theRect.iterate(3, function() {
      this.rotateAround(90, 20, 0);
    })
   
will create 3 more elements, each rotated an additional 90 degrees
around a point 20,0 relative to the root (`theRect`).
